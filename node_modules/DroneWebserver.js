//textToSpeech
var say = require('say');

//Drone
var arDrone = require('ar-drone');
//var client = arDrone.createClient();
var client = arDrone.createClient({ip: '10.1.7.155'});


//nav Data
//client.on('navdata', console.log);

//MISCs
var express = require('express');
var app = express();
var path = require('path');
var fs = require('fs');
var gm = require('gm');

//Microsoft Azure via oxford
var oxford = require('project-oxford');
var apikey = '8296fda6b2284a8988552f8e2002ee63';
var OxClient = new oxford.Client(apikey, 'australiaeast');

//vareables
var idMap = [];
var people = [];
var groupIdName = "drone_demo_group";
var groupId = [];
var found = false;
var isFoundSpoke = false;
var isAutoMode = false;
var nameToFind = "Jet";
var timeInterval = 500;
var i = 1;

//Running==========================
mapPersonList();
groupIdToObj();
main();

//groupIdToObj(); function========================
function groupIdToObj(){
    OxClient.face.personGroup.get(groupIdName)
        .then(function(response){
            console.log ("personGroup response: ", response);
            groupId = response;
        });
}

//mapPersonList functions========================
function mapPersonList(){
    console.log("mapPersonList");
    OxClient.face.person.list(groupIdName)
        .catch(function(e){
            console.log(e); //show error
        })
        .then(function(response){
            idMap = [];
            response.forEach(function(person){
                idMap[person.personId] = person;
            });
        });
}

//main function==================================
async function main(){
    say.speak("Welcome to Drone finding target systems. click the microphone and tell the target's name to start");
    //say.speak("test");

    app.use(express.static('public'));

    app.get('/', function (req, res) {
        res.sendFile(path.join(__dirname + '/index.html'));
    });

    app.get('/audio', function(req, res) {
        console.log("microphone activated");
        isFoundSpoke = false;
        isAutoMode = true;
        console.log(req.query.inputspeech);
        nameToFind=req.query.inputspeech;
        console.log(nameToFind);

        say.speak("finding " + nameToFind + " Drone is taking off.");

        client.takeoff();

        client


            .after(1000, function() {
                this.up(0.1);
            })
            .after(1000, function() {
                this.stop();
            })

            /*.after(1000, function() {
                this.clockwise(0.05);
            })*/

            .after(10000, function() {
                this.stop();

                if (found == false){
                    say.speak("Not found target, Drone is landing");
                    this.land();
                }
            });

        console.log("Drone Taking Pictures");
        var period = timeInterval; // Save a frame every timeInterval ms.
        var lastFrameTime = 0;
        var pngStream = client.getPngStream();
        pngStream
            .on('error', console.log)
            .on('data', function(pngBuffer){
                var now = (new Date()).getTime();
                if (now - lastFrameTime > period) {
                    lastFrameTime = now;
                    fs.writeFile(__dirname + '/public/DroneImageSource.png', pngBuffer, function(err){
                        if (err) {
                            console.log("Error saving PNG: " + err);
                        } else {
                            //console.log("Saved SourceFrame");
                            gm('public/DroneImageSource.png')
                                .write('public/DroneImageTemp.png', function(err){
                                    if(err) console.log(err);
                                });
                            identifyPath(__dirname + '/public/DroneImageTemp.png',groupId);
                        }
                    });
                }
            });


    });

    // Placeholder function that will later capture
    // the photos
    app.get('/photos', function(req, res){
        console.log("Drone Taking Pictures");
        isAutoMode = false;
        var period = timeInterval; // Save a frame every timeInterval ms.
        var lastFrameTime = 0;
        var pngStream = client.getPngStream();
        pngStream
            .on('error', console.log)
            .on('data', function(pngBuffer){
                var now = (new Date()).getTime();
                if (now - lastFrameTime > period) {
                    lastFrameTime = now;
                    fs.writeFile(__dirname + '/public/DroneImageSource.png', pngBuffer, function(err){
                        if (err) {
                            console.log("Error saving PNG: " + err);
                        } else {
                            //console.log("Saved SourceFrame");
                            gm('public/DroneImageSource.png')
                                .write('public/DroneImageTemp.png', function(err){
                                    if(err) console.log(err);
                                });
                            identifyPath(__dirname + '/public/DroneImageTemp.png',groupId);
                        }
                    });
                }
            });
    });

    // This router is sending a command to the drone
    // to take off
    app.get('/takeoff', function(req, res) {

        console.log("Drone Taking Off");
        client.takeoff();

    });

    // This router is sending a command to the drone
    // to land
    app.get('/land', function(req, res) {
        client.land();
        console.log("Drone Landing");
    });

    // This router is sending a command to the drone
    // to go up
    app.get('/up', function(req, res) {

        client
            .after(100, function () {
                this.up(0.2);
                console.log("Drone up");
            })
            .after(1000, function () {
                this.stop();
            });


    });

    // This router is sending a command to the drone
    // to go down
    app.get('/down', function(req, res) {

        client
            .after(100, function () {
                this.down(0.2);
                console.log("Drone down");
            })
            .after(1000, function () {
            this.stop();
            });


    });

    // This router is sending a command to the drone
    // to cancel all existing commands. Important if
    // turning clockwise and you want to stop for
    // example
    app.get('/hover', function(req, res) {
        client.stop();
        console.log("Hover");
    });

    // This router is sending a command to the drone
    // to turn clockwise
    app.get('/clockwise', function(req, res) {
        client
            .after(100, function () {
                this.clockwise(0.2);
                console.log("Drone Turning Clockwise");
            })
            .after(1000, function () {
                this.stop();
            });

    });

    // This router is sending a command to the drone
    // to go left
    app.get('/left', function(req, res) {
        client
            .after(100, function () {
                this.left(0.2);
                console.log("Drone left");
            })
            .after(1000, function () {
                this.stop();
            });

    });

    // This router is sending a command to the drone
    // to go up
    app.get('/right', function(req, res) {
        client
            .after(100, function () {
                this.right(0.2);
                console.log("Drone right");
            })
            .after(1000, function () {
                this.stop();
            });

    });

    // This router is sending a command to the drone
    // to go forward
    app.get('/fw', function(req, res) {
        client
            .after(100, function () {
                this.front(0.2);
                console.log("Drone front");
            })
            .after(1000, function () {
                this.stop();
            });

    });

    // This router is sending a command to the drone
    // to go backward
    app.get('/bw', function(req, res) {
        client
            .after(100, function () {
                this.back(0.2);
                console.log("Drone back");
            })
            .after(1000, function () {
                this.stop();
            });

    });

    app.listen(3000, function () {
    });

}

//identifyPath function==================================
function identifyPath(testPicPath,groupId){
    OxClient.face.detect({path:testPicPath, returnFaceId:true})
        .then(async function(response){
            var faceIds = [];
            var faceMap = [];
            response.forEach(function(face){
                faceIds.push(face.faceId);
                faceMap[face.faceId] = face;
            });
            console.log("FaceMap : ", faceMap);
            console.log("FaceIds : ", faceIds);
            if (faceIds != ''){
                console.log("found face");
                OxClient.face.identify(faceIds,groupId)
                    .then(async function(response){
                        console.log("face identify: ",response);
                        response.forEach(function(face){
                            if (face.candidates && face.candidates.length > 0) {
                                var topCandidate = face.candidates[0];
                                faceMap[face.faceId]['person']  = idMap[topCandidate.personId];
                                faceMap[face.faceId]['confidence']  = topCandidate.confidence;
                            }
                        });
                        await mapTarget(faceMap);

                    });
            } else {
                console.log("not found any face");
                found = false;
                await console.log("Saved resultFrame @ notFoundFace");
                await gm('public/DroneImageSource.png')
                    .fill('none')
                    .stroke("red",4)
                    .fontSize("20px")
                    .stroke("red",2)
                    .font('/Library/Fonts/Arial.ttf')
                    .drawText(30,30,"Not found any face.")
                    .write('public/DroneImage.png', function(err){
                        if(err) console.log(err);
                    });
            }
        });
}

//mapTarget function==================================
async function mapTarget(faceMap){

    for (var faceId in faceMap){
        people.push(faceMap[faceId]);
        var name = (faceMap[faceId].person && faceMap[faceId].person.name) || '<unknown>';
        console.log(name + ' @ ' + JSON.stringify(faceMap[faceId].faceRectangle));
        var topy = faceMap[faceId].faceRectangle.top;
        var topx = faceMap[faceId].faceRectangle.left;
        var bottomx = faceMap[faceId].faceRectangle.left + faceMap[faceId].faceRectangle.width;
        var bottomy = faceMap[faceId].faceRectangle.top + faceMap[faceId].faceRectangle.height;
        var textx = topx ;
        var texty = topy - 10;
        var TextOut = name;

        if(name == nameToFind){
            console.log("=========================================found======================================");
            found = true;
            timeInterval = 2000;
            var tWide = faceMap[faceId].faceRectangle.width;
            var tTopx = topx;
            var tTopy = topy;
            var tBottomx = bottomx;
            var tBottomy = bottomy;

            await following(tWide, tTopx, tTopy, tBottomx, tBottomy);
        } else {
            found = false;
            timeInterval = 500;
        }

        await gm('public/DroneImageTemp.png')
            .fill('none')
            .stroke("red",4)
            .drawRectangle(topx,topy,bottomx,bottomy)
            .fontSize("20px")
            .stroke("red",2)
            .font('/Library/Fonts/Arial.ttf')
            .drawText(textx,texty,TextOut)
            .write('public/DroneImage.png', function(err){
                if(err) console.log(err);
            })
        await console.log("Saved resultFrame name: ", name);


    }
}

//following function
async function following(tWide, tTopx, tTopy, tBottomx, tBottomy) {


    if (isAutoMode == true && found == true && i == 3){

        i = 1;

        if(isFoundSpoke == false){
            isFoundSpoke = true;
            say.speak("I found the target " + nameToFind + ". Follow the target");
        }

        if (tWide < 80){
            console.log("==============================move forward");
            say.speak("forward");
            client
                .after(100, function () {
                    this.front(0.1);
                    console.log("Drone front");
                })
                .after(1000, function () {
                    this.stop();
                });
        }
        else if (tWide > 250){
            console.log("==============================move backward");
            say.speak("backward");
            client
                .after(100, function () {
                    this.back(0.1);
                    console.log("Drone back");
                })
                .after(1000, function () {
                    this.stop();
                });
        }
        else if (tTopy < 50){
            console.log("==============================go up");
            say.speak("up");
            client
                .after(100, function () {
                    this.up(0.1);
                    console.log("Drone up");
                })
                .after(1000, function () {
                    this.stop();
                });
        }
        else if (tBottomy > 350){
            console.log("==============================go down");
            say.speak("down");
            client
                .after(100, function () {
                    this.down(0.1);
                    console.log("Drone down");
                })
                .after(1000, function () {
                    this.stop();
                });
        }
        else if (tBottomx > 450){
            console.log("==============================go right");
            say.speak("right");
            client
                .after(100, function () {
                    this.right(0.1);
                    console.log("Drone right");
                })
                .after(1000, function () {
                    this.stop();
                });
        }
        else if(tTopx < 100){
            console.log("==============================go left");
            say.speak("left");
            client
                .after(100, function () {
                    this.left(0.1);
                    console.log("Drone front");
                })
                .after(1000, function () {
                    this.stop();
                });
        }


    } else {
        i = i + 1;
    }


}